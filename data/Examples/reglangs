-- reglangs

constructs: 	a b c d e h aa gg pp vv final q qa qb qab
defuncts:	delta beta plus unfold unfoldND unfoldBro reg drawL drawC
preds:          Unfold
fovars: 	e st st' w k

axioms:

-- acceptors

labels == [a,b] & atoms == [final] & states == [q] &

(q,a) -> qa     & (q,b) -> qb      & 		
(qa,a) -> q     & (qa,b) -> qab    &
(qb,a) -> qab   & (qb,b) -> q    &
(qab,a) -> qb   & (qab,b) -> qa  & 

-- final -> q &	-- A1 acceptor of words with an even number of a's and an even 
		-- number of b's if started in q

final -> qb &   -- A2: acceptor of words with an even number of a's and an odd 
		-- number of b's if started in q

(Unfold(st)[]    <=== final -> st) &		
(Unfold(st)(x:w) <=== (st,x) -> st' & Unfold(st')$w) &

unfoldND$w == out <=< kfold(flip$transL)$w &	-- nondeterministic unfold
						-- (for kfold see base)
delta(st,x) == head$transL(st)$x &		
beta$st == ite(null$out$st,0,1) &

unfold(st) == beta.foldl(delta)(st) & 		-- deterministic unfold

-- regular expressions

plus$e == e*star(e) &

reg$1 == star$plus(a)+plus(b*c) & 		    --> star(a+b*c)

reg$2 == a+a*a*star(a)*b+a*b*star(b)+b &	    --> star(a)*b+a*star(b)	
 
reg$3 == a+star(a)+eps+a & 			    --> star(a) 
 
reg$4 == (a+eps)*star(a)*(eps+a) &		    --> star(a)

reg$5 == (a+eps)*star(a+eps)*(a+eps)+a+eps &        --> star(a)

reg$6 == star(a)*b*star(b+eps)*(b+eps)+star(a)*b &  --> star(a)*b*star(b)

reg$7 == d*pp+c*h*e+a*b+c+a+a*b*c*d+star(a*a+b+a*b)+mt+c*aa+b*gg+eps+
         a+a*a+vv+a*a*8+d+b &
     --> (a*a*8)+a+(c*aa)+c+d+(a*b*c*d)+(c*h*e)+(b*gg)+(d*pp)+
     --  star((a*a)+(a*b)+b)+vv

reg$8 == a+((b+eps)*star(b+eps)*a)+
         ((a+((b+eps)*star(b+eps)*a))*star(a+b+eps+(mt*star(b+eps)*a))*
          (a+b+eps+(mt*star(b+eps)*a))) &	    -- auto3
     --> star(b)*a*star(a+b)			

reg$9 == a+c+eps+((a+c+eps)*star(a+c+eps)*(a+c+eps))+
         ((b+((a+c+eps)*star(a+c+eps)*b))*star(a+b+eps+(c*star(a+c+eps)*b))*
          (c+(c*star(a+c+eps)*(a+c+eps)))) &	    -- auto4
     --> star(a+c)+(star(a+c)*b*star(a+b+(c*star(a+c)*b))*c*star(a+c))
     -- autoToReg.minimize.regToAuto --> star(a+c+b*star(a+b)*c)	

reg$10 == star(a)+star(a)*b*star(c*star(a)*b)*c*star(a) &
	
-- widget interpreters

drawL == wtree(1,fun((eps,k,n),text$eps,
                     (st,k,n),ite(Int$st,
				  color(k,n)$circ$11,
				  frame$blue$text$st))) &

drawC == wtree $ fun(eps,gif(cat,16,14),x,text$x) 

conjects:

Unfold(q)[] &			--> False	-- unify&narrow&
Unfold(q)[b] &			--> True	-- derive&simplify&refute
Unfold(q)[b,b] &		--> False
Unfold(q)[a,b,a,b,a,b,a] &	--> True	-- reglangs1
Unfold(q)[a,b,a,b,b,a,b,a] &	--> False
Unfold(q)[a,b,a,a,b,a] &	--> False
Unfold(q)[a,b,a,a,b,a,b] 	--> True

terms:

unfoldND[q][] <+>			--> []		-- simplify
unfoldND[q][b] <+>			--> [final]
unfoldND[q][b,b] <+>			--> []
unfoldND[q][a,b,a,b,a,b,a] <+>		--> [final]
unfoldND[q][a,b,a,b,b,a,b,a] <+>	--> []
unfoldND[q][a,b,a,a,b,a] <+>		--> []		-- 39 steps
unfoldND[q][a,b,a,a,b,a,b] <+>		--> [final]	-- 45 steps

unfold(q)[a,b,a,a,b,a] <+>		--> 0		-- 23 steps
unfold(q)[a,b,a,a,b,a,b] <+>		--> 1		-- 26 steps

unfold(qgg)[a,b,a,a,b] <+>		--> 0		-- 22 steps
unfold(qgg)[a,b,a,a,b,a] <+>		--> 1		-- 25 steps

unfoldBro(reg$2)[a,a,a,b] <+>		--> 1
unfoldBro(reg$2)[a,a,a,b,b] <+>		--> 0

auto$reg$1 <+>			--> non-deterministic acceptor of reg$1 
pauto$reg$1 			--> deterministic acceptor of reg$1   