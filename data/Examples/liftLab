-- LIFTlab

preds:		atom
constructs: 	up down pass turn call serve called served
defuncts:	procs start maxFloor
fovars:		i is dir next us ds

axioms:

  states == [start] 
& start == (procs,up,1,[],[]) 
& m == length(procs)-1 
& labels == pass:turn:map($)$prodL[[call,serve],procs] 
& atoms == map($)$prodL[[called,served],procs]

-- pass
& (next < i ==> ((is,up,next,i:us,ds),pass)   -> (is,up,next+1,i:us,ds))
& (next > i ==> ((is,down,next,us,i:ds),pass) -> (is,down,next-1,us,i:ds))

-- turn
& (next > 0        ==> ((is,up,next,[],i:ds),turn)   -> (is,down,next-1,[],i:ds))
& (next < maxFloor ==> ((is,down,next,i:us,[]),turn) -> (is,up,next+1,i:us,[]))

-- call i when up
& (i `in` is & (us =/= [] | ds = []) ==>
  ((is,up,next,us,ds),call(i)) -> ite(i>=next)(is-{i},up,next,insert(i,us),ds)
		                              (is-{i},up,next,us,desert(i,ds)))

-- call i when down
& (i `in` is & (us = [] | ds =/= []) ==> 
  ((is,down,next,us,ds),call(i)) -> ite(i<=next)(is-{i},down,next,us,desert(i,ds))
		                                (is-{i},down,next,insert(i,us),ds))

-- serve i
& ((is,up,i,i:us,ds),serve(i))   -> (insert(i,is),up,i,us,ds)
& ((is,down,i,us,i:ds),serve(i)) -> (insert(i,is),down,i,us,ds)

-- 2 floors yield 8 states
-- 3 floors yield 32 states
-- 4 floors yield 96 states
-- 5 floors yield 256 states
-- 6 floors yield 640 states

-- atoms
& (atom(called$i)(is,dir,next,us,ds) <==> i `in` us | i `in` ds)
& (atom(served$i)(is,dir,next,us,ds) <==> i `in` is)
& (x `in` atoms ==> x -> branch$filter(atom$x)$states)


