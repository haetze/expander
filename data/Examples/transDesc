-- transDesc


Derivation of

(xs,ys) >> st <=== c `in` xs & (xs,ys) -> st

The tree has been split.
The current formula is given by

(xs,ys) >> st <=== c `in` xs & (xs,ys) -> st

Simplifying the preceding formula (2 steps) leads to 

c `in` xs & (xs,ys) -> st ==> 
(length(xs)-posi(xs++ys),maxwait-length(xs),length(ys)) > weight(st)

Narrowing the preceding formula (2 steps) leads to 

c `in` xs & 
Any f:(st = f((xs,ys)) & 
       (Any x:(Idle(x)(xs,ys) & maxwait > length(xs) & f = request(x)) | 
        Any x xs0:(f = enter & xs = (x:xs0) & ys = []) | 
        Any x:(f = leave & ys = [x]))) ==> 
(length(xs)-posi(xs++ys),maxwait-length(xs),length(ys)) > weight(st)

Simplifying the preceding formula (11 steps) leads to 3 factors.
The current factor is given by

All x:(c `in` xs & st = (request(x)(xs,ys)) & Idle(x)(xs,ys) & 
       maxwait > length(xs) ==> 
       (length(xs)-posi(xs++ys),maxwait-length(xs),length(ys)) > weight(st))

Simplifying the preceding factors (11 steps) leads to the factor

All x:(st = (x:xs,ys) & c `in` xs & x `NOTin` xs & x `NOTin` ys & 
       maxwait > length(xs) ==> 
       (length(xs)-posi(xs++ys)) > (suc(length(xs))-posi(x:(xs++ys))) | 
       True & (length(xs)-posi(xs++ys)) = (suc(length(xs))-posi(x:(xs++ys))) | 
       (maxwait-length(xs)) = (maxwait-suc(length(xs))) & 
       length(ys) > length(ys) & 
       (length(xs)-posi(xs++ys)) = (suc(length(xs))-posi(x:(xs++ys))))

Simplifying the preceding factors (2 steps) leads to the factor

All x:(st = (x:xs,ys) & c `in` xs & x `NOTin` xs & x `NOTin` ys & 
       maxwait > length(xs) ==> 
       (length(xs)-posi(xs++ys)) > (suc(length(xs))-posi(x:(xs++ys))) | 
       (length(xs)-posi(xs++ys)) = (suc(length(xs))-posi(x:(xs++ys))))

Applying the theorem

posi(x:s) = suc(posi(s)) <=== c `in` s

at position [0,1,1,1,1] of the preceding factors leads to the factor

All x:(st = (x:xs,ys) & c `in` xs & x `NOTin` xs & x `NOTin` ys & 
       maxwait > length(xs) ==> 
       (length(xs)-posi(xs++ys)) > (suc(length(xs))-posi(x:(xs++ys))) | 
       (length(xs)-posi(xs++ys)) = (suc(length(xs))-suc(posi(xs++ys))) & 
       c `in` (xs++ys))

Applying the theorem

x `in` (xs++ys) <=== x `in` xs

at position [0,1,1,1] of the preceding factors leads to the factor

All x:(st = (x:xs,ys) & c `in` xs & x `NOTin` xs & x `NOTin` ys & 
       maxwait > length(xs) ==> 
       (length(xs)-posi(xs++ys)) > (suc(length(xs))-posi(x:(xs++ys))) | 
       (length(xs)-posi(xs++ys)) = (suc(length(xs))-suc(posi(xs++ys))) & 
       c `in` xs)

Simplifying the preceding factors (4 steps) leads to 2 factors.
The current factor is given by

All f:(Any x xs0:(f = enter & xs = (x:xs0) & ys = []) & c `in` xs & 
       st = f(xs,ys) ==> 
       (length(xs)-posi(xs++ys),maxwait-length(xs),length(ys)) > weight(st))

Simplifying the preceding factors (11 steps) leads to the factor

All x xs0:(c = x & st = enter(x:xs0,[]) & ys = [] & xs = (x:xs0) | 
           c `in` xs0 & st = enter(x:xs0,[]) & ys = [] & xs = (x:xs0) ==> 
           (suc(length(xs0))-posi((x:xs0)++[]),maxwait-length(x:xs0),0) > 
           weight(st))

Simplifying the preceding factors (11 steps) leads to 3 factors.
The current factor is given by

All xs0:(st = (init(c:xs0),[last(c:xs0)]) & ys = [] & xs = (c:xs0) ==> 
         (suc(length(xs0))-posi(c:xs0)) > (length(xs0)-posi(c:xs0)) | 
         (suc(length(xs0))-posi(c:xs0)) = (length(xs0)-posi(c:xs0)) & 
         (maxwait-suc(length(xs0)),0) > (maxwait-length(xs0),1))

Simplifying the preceding factors (2 steps) leads to 2 factors.
The current factor is given by

All x xs0:(c `in` xs0 & st = enter(x:xs0,[]) & ys = [] & xs = (x:xs0) ==> 
           (suc(length(xs0))-posi(x:xs0),maxwait-suc(length(xs0)),0) > 
           weight(st))

Simplifying the preceding factors (7 steps) leads to a single formula,
which is given by

All f:(Any x:(f = leave & ys = [x]) & c `in` xs & st = f(xs,ys) ==> 
       (length(xs)-posi(xs++ys),maxwait-length(xs),length(ys)) > weight(st))

Simplifying the preceding formula (11 steps) leads to 

All x:(st = (xs,[]) & c `in` xs & ys = [x] ==> 
       (length(xs)-posi(xs++[x]),maxwait-length(xs),1) > 
       (length(xs)-posi(xs),maxwait-length(xs),0))

Simplifying the preceding formula (3 steps) leads to 

All x:(st = (xs,[]) & c `in` xs & ys = [x] ==> 
       (length(xs)-posi(xs++[x])) > (length(xs)-posi(xs)) | 
       (length(xs)-posi(xs++[x])) = (length(xs)-posi(xs)))

Applying the theorem

posi(s++s') = posi(s) <=== c `in` s

at position [0,1,1,0,1] of the preceding formula leads to 

All x:(st = (xs,[]) & c `in` xs & ys = [x] ==> 
       (length(xs)-posi(xs++[x])) > (length(xs)-posi(xs)) | 
       (length(xs)-posi(xs)) = (length(xs)-posi(xs)) & c `in` xs)

Simplifying the preceding formula (3 steps) leads to 

True

Number of proof steps: 17