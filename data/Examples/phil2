-- phil2

{- Moller, Struth, Modelling Computing Systems, 14.4.1

   LTS for Phil1||...||Philn||Fork1||...||Forkn
	   Phil0 = tL.tR.eat.dL.dR.Phil0
	   Phili = tR.tL.eat.dL.dR.Phili  i > 0
	   Forki = t.d.Forki
           sync$Phili = [tR,tL,eat,dR,dL] 
	   sync$Forki = [t,d] 
-}

constructs:	tR tL dR dL eat t d
defuncts:   	procs lg procs neighbours /\ \/ And Or EF		
fovars:     	i j phils forks

axioms:

lg == length(procs) &

neighbours$i == [(i-1)`mod`lg,(i+1)`mod`lg] &

states == [(tL:replicate(lg-1)$tR,replicate(lg)$t)] & -- (phils,forks)

labels == map($)$prodL[[tR,tL,dR,dL,eat],procs] &

(phils!!0 = tL & forks!!1 = t 
	==> ((phils,forks),tL$0) 
			-> (upd(phils)(0)$tR,upd(forks)(1)$d)) &

(i`in`tail$procs & phils!!i = tR & forks!!i = t 
	==> ((phils,forks),tR$i) 
			-> (upd(phils)(i)$tL,upd(forks)(i)$d)) &

(phils!!0 = tR & forks!!0 = t 
	==> ((phils,forks),tR$0) 
			-> (upd(phils)(0)$eat,upd(forks)(0)$d)) &

(i`in`tail$procs & phils!!i = tL & forks!!(i+1`mod`lg) = t 
	==> ((phils,forks),tL$i) 
			-> (upd(phils)(i)$eat,upd(forks)(i+1`mod`lg)$d)) &

(i`in`procs & phils!!i = eat
	==> ((phils,forks),eat$i) -> (upd(phils)(i)$dR,forks)) &

(i`in`procs & phils!!i = dR & forks!!i = d 
	==> ((phils,forks),dR$i) 
			-> (upd(phils)(i)$dL,upd(forks)(i)$t)) &

(i`in`procs & phils!!i = dL & forks!!(i+1`mod`lg) = d 
	==> ((phils,forks),dL$i) 
			-> (upd(phils)(i)$tR,upd(forks)(i+1`mod`lg)$t)) 
	  
terms:

eat(2) <+> 
EF(eat(2))(([],[])) <+> 
Or(map(eat)(procs)) <+>
And(map(eat)(procs)) <+>
EF(And(map(eat)(procs))) <+>
And(map(EF.eat)(procs)) <+>
Or(map(fun([x,y],eat(x)/\eat(y)))(neighbours)) <+>
Or(map(fun(x,avail(x)\/eat(x)\/eat((x-1)`mod`lg)))(procs))

