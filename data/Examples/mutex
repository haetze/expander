-- mutex

{- Huth, Ryan, Logic in Computer Science, 14.3

   Safety:       There is at most one process in the critical section.	(1)
   Liveness:     If a process asks for entering the critical section,
	         it will enter it sometime.				(2)
   Non-blocking: Every process may ask for entering the critical 
		 section.						(3)
   No strict sequencing : 
		 Every process that has left the critical section may 
		 enter it again before another process does so. 	(4)
-}	

specs:		modal
constructs:  	idle wait crit
defuncts:	procs
preds:   	safe live nonBlock noSeq Safe Live NonBlock NoSeq 
		crit' crits Idle Wait Crit Crit' Crits check
defuncts:   	procs start pairs diffpairs pair drawN drawI drawL drawK drawO 
		drawS drawC
fovars:		st i c is ws cs k n

axioms:

states == [start] &
start == (procs,[],[]) & 
atoms == map($)$pairs & 
pairs == prodL[[idle,wait,crit],procs] &

(NOTnull$is ==> (is,ws,cs) -> branch$map(fun(i,(is-[i],i:ws,cs)))$is) & 
							-- i waits
(NOTnull$ws ==> (is,ws,[]) -> (is,init$ws,[last$ws])) &	-- last$ws enters
(is,ws,[c]) -> (insert(c)$is,ws,[]) &			-- c leaves

-- 2 processes yield 9 states
-- 3 processes yield 31 states
-- 4 processes yield 129 states
-- 5 processes yield 651 states
-- 6 processes yield 3913 states
-- 7 processes yield 27399 states

idle$i -> branch$filter(Idle$i)$states &
wait$i -> branch$filter(Wait$i)$states &
crit$i -> branch$filter(Crit$i)$states &

(Idle(i)(is,ws,cs) <==> i `in` is) &
(Wait(i)(is,ws,cs) <==> i `in` ws) &
(Crit(i)(is,ws,cs) <==> i `in` cs) &

-- modal operator simplification

(safe$i <==> (crit$i) `then` crit'$i) &			

(live$i <==> (wait$i) `then` AF$crit$i) &			

(nonBlock$i <==> (idle$i) `then` EX$wait$i) &

(noSeq$i <==> EF $ (crit$i) /\ ((crit$i) `EU` 
			        ((not$crit$i) /\ ((crit'$i) `EU` crit$i)))) &

(crit'$i <==> all(not.crit)$procs-[i]) & 

(crits <==> map(crit)$procs) &

-- modal operator simplification outside eval

(Safe$i <==> (Crit$i) `then` Crit'$i) &			

(Live$i <==> (Wait$i) `then` AF$Crit$i) &

(NonBlock$i <==> (Idle$i) `then` EX$Wait$i) &

(NoSeq$i <==> EF $ (Crit$i) /\ ((Crit$i) `EU` 
			        ((not$Crit$i) /\ ((Crit'$i) `EU` Crit$i)))) &

(Crit'$i <==> all(not.Crit)$procs-[i]) & 

(Crits <==> map(Crit)$procs) &

-- widget interpreters

drawN == wtree $ fun(st,text$index(st,states)) &

drawI == wtree $ fun(st,color(index(st,states),length$states)$circ$11) &

drawL == wtree(2,fun((st,k,n),color(k,n)$circ$11)) &

drawK == wtree $ fun(st,matrix$filter(check$st)$pairs) &

(check(is,ws,cs)(idle,i) <==> i `in` is) &
(check(is,ws,cs)(wait,i) <==> i `in` ws) &
(check(is,ws,cs)(crit,i) <==> i `in` cs) &

drawO == wtree $ fun(st,matrix$map(pair)$st) &

pair(idle$i) == (idle,i) &
pair(wait$i) == (wait,i) &
pair(crit$i) == (crit,i) &

drawS == wtree $ fun(sat$st,frame$text$st) &

drawC == wtree $ fun(sat$st,green$circ$11,st,red$circ$11) &

diffpairs == filter(=/=)$prodL$[procs,procs] 

conjects:

(Crit$1)$start &   						--> False
(EF$Crit$1)$start &						--> True
(or$Crits)$start &						--> False

(Live$1)$start &						--> True
(NonBlock$1)$start &						--> True
(NoSeq$1)$start &						--> True ?
(EF$or$Crits)$start &						--> True

(EF$and$Crits)$start &						--> False ?
(and$map(EF.Crit)$procs)$start &				--> True
(or$map(rel((x,y),EF$Crit(x)/\Crit$y))$diffpairs)$start & 	--> False ?
(and$map(rel((x,y),EF$Crit(x)\/Crit$y))$diffpairs)$start &      --> True

(and$map(Live)$procs)$start &					--> True
(and$map(NonBlock)$procs)$start &				--> True
(and$map(NoSeq)$procs)$start &					--> True ?
(and$map($)$prodL[[Live,NonBlock,NoSeq],procs])$start		--> True ?

terms: 

eval(or$crits) <+>  		--> [([1],[],[0]),([],[1],[0]),([0],[],[1]),
				--   ([],[0],[1])]
eval(live$1) <+>						--> states
eval(nonBlock$1) <+>						--> states
eval(noSeq$1) <+>						--> states

eval(EF$or$crits) <+>						--> states
stateflow(EF$or$crits) <+>					--> states
eval(EF$and$crits) <+>						--> []
stateflow(EF$and$crits) <+>					--> []
eval(and$map(EF.crit)$procs) <+>				--> states
eval(or$map(rel((x,y),EF$crit(x)/\crit$y))$diffpairs) <+>	--> []
eval(and$map(rel((x,y),EF$crit(x)\/crit$y))$diffpairs) <+>	--> states

eval(and$map(live)$procs) <+>					--> states
eval(and$map(nonBlock)$procs) <+>				--> states
eval(and$map(noSeq)$procs) <+>					--> states
eval(and$map($)$prodL[[live,nonBlock,noSeq],procs]) <+>		--> states

eval((idle$1)`EU`wait$1) <+>	--> [([0],[1],[]),([],[1,0],[]),([],[0,1],[]),
				--   ([],[1],[0]),([0,1],[],[]),([1],[0],[]),
				--   ([1],[],[0])]
eval((idle$1)`EU`((wait$1)`EU`crit$1)) <+>			--> states
eval(((idle$1)`EU`(wait$1))`EU`crit$1)				--> states

