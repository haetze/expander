-- crossing3

{- Moller, Struth, Modelling Computing Systems, 14.3

   LTS for Road||Rail||Control
	   Road = car.up.ccross.down.Road 
	   Rail = train.green.tcross.red.Rail 
           Control = green.red.Control + up.down.Control
           sync$Road 	= [up,down] 
	   sync$Rail    = [green,red] 
	   sync$Control = [up,down,green,red] 

   A car may not cross at the same time as a train. 		(1)
   If a car arrives, it crosses eventually. 			(2)
   If a train arrives, it crosses eventually.			(3)
-}

specs:		modal
constructs:	car train green red up down ccross tcross
preds:		P X
defuncts:       state1 state2 start draw
fovars:		p q p' q' act act'
hovars:      	P X

axioms:

state1 == (car,train,green) &	-- (Road,Rail,Control)
state2 == (car,train,up) &

states == [state1,state2] &

(car,x,y) 	-> (up,x,y) &
(up,x,up)  	-> (ccross,x,down) &
(ccross,x,y)	-> (down,x,y) &
(down,x,down)	-> (car,x,green) <+> (car,x,up) &
(x,train,y)    	-> (x,green,y) &
(x,green,green)	-> (x,tcross,red) &
(x,tcross,y)	-> (x,red,y) &
(x,red,red)	-> (x,train,green) <+> (x,train,up) 

conjects: 

(EF$(ccross<>true)/\tcross<>true)$state1 &	--> False 	(1)
(EF$(ccross<>true)/\tcross<>true)$state2 &	--> False 	(1)
(AG$car#AF$ccross#true)$state1 &   	 	--> True	(2)
(AG$car#AF$ccross#true)$state2 &   	 	--> True	(2)
(AG$train#AF$tcross#true)$state1 &		--> True	(3)
(AG$train#AF$tcross#true)$state2		--> True	(3)

terms:

eval$(ccross<>true)/\tcross<>true	<+>     --> []
eval$car#AF$ccross#true			<+>	--> states
eval$train#AF$tcross#true			--> states   	   

