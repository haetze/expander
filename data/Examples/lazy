-- lazy

specs:      bool

constructs: leaf #
defuncts:   is_even mergesort1 split1 merge1 mergesort2 split2 merge2
	    mergesort3 split3 merge3 repBy1 repBy2 rep0 rep1 rep2 rep3 pal1 pal2 	    	    pal3 reveq0 reveq1 reveq2 reveq3 sort1 sort2 represttips1 ||   
            represttips2 f g foo goo nats nats' fibs tfibs fibs' client server   
	    Server Client1 Requests1 Client2 Requests2 CSR
preds:      even odd 
fovars:     x y z s s' t u t1 t2 u1 u2 r s1 s2 ls ls1 ls2 ls3 ls4 n a b requests
hovars:     f g client server

axioms:

is_even == fun(x||bool$even$x,true,x||bool$odd$x,false) &

(even(0) <==> True) &
(even(suc(x)) <==> odd(x)) &

(odd(x) <==> Not(even(x))) &

-- MERGESORT

(mergesort1(x:y:s) = merge1(mergesort1$x:s1,mergesort1$y:s2) 
   <=== split1(s) = (s1,s2)) & 
mergesort1[x] = [x] &mergesort1[]  = [] &
   
(split1(x:y:s) = (x:s1,y:s2) <=== split1(s) = (s1,s2)) &
split1[x] = ([x],[]) &split1[]  = ([],[]) &

(merge1(x:s,y:s') = x:merge1(s,y:s') <=== x <= y) &
(merge1(x:s,y:s') = y:merge1(x:s,s') <=== x > y) &
merge1([],s) = s &
merge1(s,[]) = s &

(split2(s) = (s1,s2) 
   ==> mergesort2(x:y:s) == merge2(mergesort2$x:s1,mergesort2$y:s2)) &
mergesort2(s) == s &

(split2(s) = (s1,s2) ==> split2(x:y:s) == (x:s1,y:s2)) &
split2(s) == (s,[]) &

(x <= y ==> merge2(x:s,y:s') == x:merge2(s,y:s')) &
merge2(x:s,y:s') == y:merge2(x:s,s') &
merge2([],s)     == s &
merge2(s,[])     == s &

mergesort3(x:y:s) == fun((s1,s2),merge3(mergesort3$x:s1,mergesort3$y:s2))
			$split3$s &
mergesort3[x] == [x] &
mergesort3[]  == [] &

split3(x:y:s) == fun((s1,s2),(x:s1,y:s2))$split3$s &
(length(s) <= 1 ==> split3(s) == (s,[])) &

merge3(x:s,y:s') == ite(x<=y,x:merge3(s,y:s'),y:merge3(x:s,s')) &
merge3([],s)     == s &
merge3(s,[])     == s &

-- BINARY TREES

(repBy1(g)(f)(t) = u <=== g(f)(t,x) = (x,u)) &

repBy2(g)(f)(t) == get1(mu x u.g(f)(t,x)) &

rep0(f)(leaf(x),y) = (x,leaf(y)) &
(rep0(f)(t1#t2,x)  = (f(y,z),u1#u2) <=== rep0(f)(t1,x) = (y,u1) & 
					 rep0(f)(t2,x) = (z,u2)) &

rep1(f)(leaf(x),y) == (x,leaf(y)) &
(rep1(f)(t1,x) = (y,u1) & 
 rep1(f)(t2,x) = (z,u2) ==> rep1(f)(t1#t2,x) == (f(y,z),u1#u2)) &

rep2(f)(leaf(x),y) == (x,leaf(y)) &
rep2(f)(t1#t2,x)   == fun((y,u1),fun((z,u2),(f(y,z),u1#u2))
				    $rep2(f)(t2,x))
                         $rep2(f)(t1,x) &

rep3(f) == fun((leaf(x),y),(x,leaf(y)),
               (t1#t2,x),fun((y,u1),fun((z,u2),(f(y,z),u1#u2))
				       $rep3(f)(t2,x))
                            $rep3(f)(t1,x)) &

-- PALINDROMES

(pal1(s) = b <=== reveq1(s)(r) = (r,b)) &      -- reveq1(s1)(s2) = (reverse s1,s1=s2)

reveq1[][]          = ([],true) &
(reveq1(x:s1)(y:s2) = (r++[x],eq(x,y)`and`b) <=== reveq1(s1)(s2) = (r,b)) &

(reveq2(s) = (r,f) ==> pal2(s) == f(r)) &

reveq2[] == ([],fun(s,true)) &
(reveq2(s1) = (r,f) ==> reveq2(x:s1) == (r++[x],fun(y:s2,eq(x,y)`and`f(s2)))) &

-- TREE SORTING

(sort1(t) = u <=== represttips1(t,sort(ls)) = (ls,u,ls1)) &

sort2(t) == get1(mu ls u ls1.represttips2(t)(sort$ls)) &

(represttips1(leaf(x),ls) = ([x],leaf(y),ls1) <=== ls = y:ls1) &
(represttips1(t1#t2,ls)   = (ls1++ls3,u1#u2,ls4) 
          		             <=== represttips1(t1,ls) = (ls1,u1,ls2) & 
				          represttips1(t2,ls2) = (ls3,u2,ls4)) &

represttips2(leaf(x))   == fun(~(y:ls),([x],leaf(y),ls)) &
represttips2(t1#t2)(ls) == fun((ls1,u1,ls2),
			       fun((ls3,u2,ls4),(ls1++ls3,u1#u2,ls4))
			          (represttips2(t2)(ls2)))
		              (represttips2(t1)(ls)) &
	     
-- INFINITE OBJECTS

nats == 0:map(+1)$nats &

nats' == mu s.(0:map(+1)$s) &
	     
natsf == mu f.fun(n,n:f$n+1) &			-- nats = natsf$0

fibs  == 0:tfibs &
tfibs == 1:zipWith(+)(fibs)$tfibs &

fibs' == get0(mu s s'.(0:s',1:zipWith(+)(s)$s')) &

Server(a:s) == mkResponse(a):Server(s) &
					
Requests1 = Client1(0)$Server$Requests1 &

(Client1(a)(s) = a:Client1(mkRequest$b)(s') <=== s = b:s') &
			 
Requests2 == Client2(0)$Server$Requests2 &

Client2(a) == fun(~(b:s),a:Client2(mkRequest$b)(s)) &

CSR == mu client server requests.(fun(a,fun(~(b:s),a:client(mkRequest$b)(s))),
	    			  fun(~(a:s),mkResponse(a):server(s)),
				  client(0)$server$requests) &

mkRequest == (*2) & mkResponse == (+1) &

-- LAZY MULTIPLICATION

foo(x) == ite(x=0,0,foo(x-1)*foo(x+1)) &
goo(x) == ite(x=0,0,goo(x+1)*goo(x-1))

conjects:

mergesort1[3,2,1,4] = s &

repBy1(rep0)(min)(leaf(3)#(leaf(2)#leaf(6))) = t & -- 6 match-nar&simpl steps, 
						   -- 11 sec	       (30.5.09)

repBy1(rep1)(min)(leaf(3)#(leaf(2)#leaf(6))) = t & -- 1 nar step, 7 simpl steps
					           -- 		       (30.5.09)

repBy1(rep2)(min)(leaf(3)#(leaf(2)#leaf(6))) = t & -- 1 nar step, 16 simpl steps
						   -- 		       (30.5.09)

repBy1(rep3)(min)(leaf(3)#(leaf(2)#leaf(6))) = t & -- 1 nar step, 23 simpl steps
						   -- 		       (30.5.09)

pal1[2,3,2] = b 				 & -- 5 unify-nar&simpl steps, 
						   -- 14 sec           (30.5.09)

pal1[2,3,1,2] = b				 & -- 6 unify-nar&simpl steps, 
						   -- 20 sec           (30.5.09)

sort1(leaf(3)#(leaf(2)#leaf(6))) = t		 & -- 6 match-nar&simpl steps, 
						   -- 13 sec           (30.5.09)

take(3) $ Requests1 = requests                     --> [0,2,6]=requests & ...
					   	   -- 10 steps, 34 sec (23.7.11)
						   -- 10 steps, 38 sec (random)
terms: 

mergesort2[3,2,1,4] <+>

mergesort3[3,2,1,4] <+>

repBy2(rep1)(min)(leaf(3)#(leaf(2)#leaf(6)))   <+> -- 7 steps          (30.5.09)

repBy2(rep2)(min)(leaf(3)#(leaf(2)#leaf(6)))   <+> -- 16 steps         (30.5.09)

repBy2(rep3)(min)(leaf(3)#(leaf(2)#leaf(6)))   <+> -- 23 steps         (30.5.09)

pal2[2,3,2] 			       	       <+> -- 12 steps         (1.11.17)
						   
pal2[2,3,1,2] 			       	       <+> -- 9 steps          (1.11.17)
						   
sort2(leaf(3)#(leaf(2)#leaf(6)))	       <+> -- 28 steps         (30.5.09)
						   
take(3) $ nats			      	       <+> -- 21 steps         (1.11.17)

take(3) $ nats'  			       <+> -- 22 steps         (1.11.17)

take(3) $ Requests2			       <+> --> [0,2,6]
						   -- 50 steps        (31.10.17)
take(4) $ Requests2			       <+> --> [0,2,6,14]
						   -- 95 steps        (31.10.17)
take(5) $ Requests2			       <+> --> [0,2,6,14,30]
						   -- 161 steps       (31.10.17)
take(3) $ get2 $ CSR			       <+> --> [0,2,6]
						   -- 66 steps 	       (23.7.11)
foo(3)					       <+> --> 0
						   -- 15 steps 	       (30.5.09)
goo(3)					       --> ((..*goo(4))*goo(3))*goo(2)	       
					       --> 0  48 steps (bf)    (30.5.09)

