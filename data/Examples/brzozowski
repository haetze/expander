-- brzozowski

constructs: 	star mt eps a b c int
defuncts: 	delta beta unfold1 unfold2 step S A B reg regI ite
copreds:	`~`
fovars: 	t u v w 

axioms:

delta(t+u,x) == delta(t,x)+delta(u,x) &

-- delta(t*u,x) == delta(t,x)*u+ite(beta$t=0,mt,delta(u,x)) & -- for unfold1

(delta(t*u,x) = delta(t,x)*u <=== beta$t=0) &		      -- for proofs
(delta(t*u,x) = delta(t,x)*u+delta(u,x) <=== beta$t=1) &

delta(star$t,x) == delta(t,x)*star(t) &
(x `in` [a,b,c,mt,eps] ==> delta(x,y) == ite(x=y,eps,mt)) &
delta(int,x) == ite(Int$x,eps,mt) &

beta$t+u == max(beta$t,beta$u) &
beta$t*u == beta(t)*beta(u) &
beta$eps == 1 &
beta$star$t == 1 &
(x `in` [a,b,c,mt,int] ==> beta(x) == 0) &

t+mt == t & 					-- (2)
-- t+ite(x,u,v) == ite(x,t+u,t+v) &		-- (4)
-- ite(x,u,v)+t == ite(x,u+t,v+t) &		
x*max(y,z) == max(x*y,x*z) &			-- (5)

unfold1$t == beta . sfold(delta)$t &		-- sfold = strict fold
						-- see Esolve.hs
unfold2$t == betaBro . sfold(deltaBro)$t &	

reg == star$a+b*c &
regI == star$a+int*c &

-- CF grammar

step$S == a*B+b*A+eps &
step$A == a*S+b*A*A &
step$B == b*S+a*B*B &

(t `~` u ===> beta$t = beta$u & delta(t,x) `~` delta(u,x)) 

theorems:

(t+u)+(v+w) = t+v+u+w 				-- (3)

conjects:

star(t+u) `~` star(star(t)*star(u)) &

t*(u+v) `~` t*u+t*v				-- (1)

terms:

unfold1(reg)[a,b,c,a]  		<+>	--> 1		-- 35 steps (some are slow)
unfold1(regI)[a,5,c,a] 		<+>	--> 1		-- 35 steps (some are slow)
unfold1(reg)[b,c,a,c]  		<+>	--> 0		-- 34 steps (some are slow)

unfold2(reg)[a,b,c,a]      	<+>	--> 1		-- 8 steps 
unfold2(regI)[a,5,c,a] 		<+>	--> 1		-- 8 steps 
unfold2(reg)[b,c,a,c]     	<+>	--> 0		-- 8 steps 

unfoldBro(reg)[a,b,c,a] 	<+>     --> 1		-- 2 steps
unfoldBro(regI)[a,5,c,a,a,566,c]<+>	--> 1		-- 2 steps 
unfoldBro(regI)[a,c,67,a] 	<+>	--> 0		-- 2 steps
unfoldBro(reg)[b,c,a,c] 	<+>	--> 0		-- 2 steps

-- unfold2/Bro(S) accepts words with an equal number of a's and b's

unfold2(S)[a,b]   		<+>	--> 1		-- 6 steps
unfold2(S)[a,b,a]  		<+>	--> 0		-- 7 steps
unfold2(S)[a,b,a,b,a,a,b,a,b,b,a,b,a,a,b,a,b,b,b,a,b,a]   <+> --> 1  -- 26 steps
unfoldBro(S)[a,b,a,b,a,a,b,a,b,b,a,b,a,a,b,a,b,b,b,a,b,a] <+> --> 1  -- 1 step
unfoldBro(S)$replicate(5)(a)++replicate(5)(b)		      --> 1


