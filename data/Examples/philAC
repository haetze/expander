-- philAC

constructs: think eat free used a b c d f1 f2 f3 f4 initial safe eats
defuncts:   states atoms AG EF /\ `then` left right
fovars:     st

axioms:

states = map(bag)(PROD(map(tup(think,eat))[a,b,c,d]++map(tup(free,used))[f1,f2,f3,f4])) &
atoms = [initial,safe] &

  left(a) = f1 & left(b) = f2 & left(c) = f3 & left(d) = f4 
& right(a) = f2 & right(b) = f3 & right(c) = f4 & right(d) = f1 

& (left(x) = y & right(x) = z ==> think(x)^free(y)^free(z) -> eat(x))
& eat(x) -> think(x)^free(left(x))^free(right(x))

& initial -> bag(map(think)[a,b,c,d])
 
& eats(x) -> filter(bool(rel(st,eat(x)`in`st)))(states)

& safe -> [think(a)^think(b)^think(c)^think(d)^free(f1)^free(f2)^free(f3)^free(f4),
           eat(a)^think(b)^think(c)^think(d)^used(f1)^used(f2)^free(f3)^free(f4),
           eat(b)^think(a)^think(c)^think(d)^used(f2)^used(f3)^free(f1)^free(f4),
           eat(c)^think(a)^think(b)^think(d)^used(f3)^used(f4)^free(f1)^free(f2),
           eat(d)^think(a)^think(b)^think(c)^used(f1)^used(f4)^free(f2)^free(f3),
	   eat(a)^eat(c)^think(b)^think(d)^used(f1)^used(f2)^used(f3)^used(f4),
	   eat(b)^eat(d)^think(a)^think(c)^used(f1)^used(f2)^used(f3)^used(f4)]

conjects:

rel(st,eat(a)`in`st)(eat(a)^eat(b))
	  
terms:

AG(safe) <+> (initial`then`EF(eats(a)/\eats(c))) <+> eats(a) 

<+> filter(bool(rel(st,eat(a)`in`st)))[eat(a)^eat(b),eat(c)]
