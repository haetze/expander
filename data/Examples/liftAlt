-- LIFTalt

specs:		modalS
preds:		Sorted
constructs: 	up down called served sorted
defuncts:	procs start maxFloor reverse
fovars:		i st is dir next us ds

axioms:

  states == [start] 
& start == (procs,up,1,[],[]) 
& maxFloor == length(procs)-1 
& atoms == sorted:map($)$prodL[[called,served],procs]

-- pass
& (next < i ==> (is,up,next,i:us,ds)   -> (is,up,next+1,i:us,ds))
& (next > i ==> (is,down,next,us,i:ds) -> (is,down,next-1,us,i:ds))

-- turn
& (next > 0        ==> (is,up,next,[],i:ds)   -> (is,down,next-1,[],i:ds))
& (next < maxFloor ==> (is,down,next,i:us,[]) -> (is,up,next+1,i:us,[]))

-- call when up
& (us =/= [] | ds = [] ==> 
  (is,up,next,us,ds) 
   -> branch(map(fun(i,ite(i>=next)(is-{i},up,next,insert(i,us),ds)
				   (is-{i},up,next,us,desert(i,ds))))$is))

-- call when down
& (us = [] | ds =/= [] ==> 
  (is,down,next,us,ds) 
   -> branch(map(fun(i,ite(i<=next)(is-{i},down,next,us,desert(i,ds))
			           (is-{i},down,next,insert(i,us),ds)))$is))

-- serve
& (is,up,i,i:us,ds)   -> (insert(i,is),up,i,us,ds)
& (is,down,i,us,i:ds) -> (insert(i,is),down,i,us,ds)

-- 2 floors yield 8 states
-- 3 floors yield 32 states
-- 4 floors yield 96 states
-- 5 floors yield 256 states
-- 6 floors yield 640 states

-- atoms
& (atom(called$i)(is,dir,next,us,ds) <==> i `in` us | i `in` ds)
& (atom(served$i)(is,dir,next,us,ds) <==> i `in` is)
& (atom(sorted)(is,dir,next,us,ds) <==> Sorted$reverse(ds)++next:us)

& (x `in` atoms ==> x -> branch$filter(atom$x)$states)

& (Sorted[] <==> True)
& (Sorted[x] <==> True)
& (Sorted(x:y:s) <==> x<=y & Sorted(y:s))

& reverse[] == []
& reverse(x:s) == reverse(s)++[x]

conjects:

  ({1},up,1,[],[0])`sats`AF$served$0					--> True
& ({0},up,1,[1],[])`sats`AF$served$0					--> True
& start`sats`AG$called(0)`then`AF$served$0				--> True
& And$map(rel(i,start`sats`AG$called(i)`then`AF$served$i))$procs	--> True
& start`sats`AG$sorted							--> True


