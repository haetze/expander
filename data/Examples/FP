-- FP

preds:      divides P1 P2 P3 P4
defuncts:   div loop fact factI loop fib twice nats nats' primes sieve sieve'
	    const update
fovars:     x y q r n s
hovars:     f 

axioms:

  x+0 = x
& x+suc(y) = suc(x+y)

& x-0 = x
& 0-x = 0
& suc(x)-suc(y) = x-y

& x*0 = 0
& x*suc(y) = x+(x*y)

& x**0 = 1
& x**suc(y) = x*(x**y)

& (div(x,y) = (0,x) <=== x < y)
& (div(x,y) = (q+1,r) <=== 0 < y & y <= x & div(x-y,y) = (q,r))

& (INV(x,y,q,r) <=== x = (y*q)+r)

--& div(x,y) == loop(y,0,x)
& (r < y ==> loop(y,q,r) == (q,r))
& (r >= y ==> loop(y,q,r) == loop(y,q+1,r-y))

& fib(n) == ite(n<2)(n)(fib(n-1)+fib(n-2))

& fact(n) == ite(n<2)(1)(n*fact(n-1))

& factI(n) == loop(n,1)
& loop(n,x) == ite(n>1)(factI(n-1,n*x),x)

& twice(f) == f.f
& (divides(y)(x) <==> x`mod`y = 0)

& nats(n) == n:nats(n+1)
& nats' == mu f.fun(n,n:f(n+1))

& primes == sieve$nats$2
& sieve(x:s) == x:sieve(filter(Not.divides(x))$s) 
& sieve' == mu f.fun(x:s,x:f(filter(Not.divides(x))$s))

& const(x)(y) = x
& update(f)(x)(y)(z) == ite(x=z)(y)(f$z)

conjects: 

  div(66,5) = (q,r)
& (f1.f2.f3.f4.f5.f6)$a = f1$f2$f3$f4$f5$f6$a

terms:

4+5*6-3 				<+>
fun(x,x*x)$5 				<+>
fun((x,y),x*y+5+x)(7,8)			<+>
const(a)$b				<+>
update(suc)(5)(7)(4)			<+>
((+2)**5)$10				<+>
flip(f)(a)(b)				<+>
flip(f)(a)(b)(c)			<+>
curry(f)(a)(b)(c)(d)			<+>
uncurry(f)(a,b,c,d)			<+>
prodE(f1,f2,f3,f4)(a)	       	        <+>
(P1\/divides\/P3\/divides)(x)	        <+>

fun(x,x**3*7+6)$4 			<+> --> 454
fun(x,x+6)$fun(x,x*7)$fun(x,x**3)$4 	<+>
(+6)$(*7)$(**3)$4 			<+>
((+6).(*7).(**3))$4 			<+>
fun(x,fun(y,fun(z,4**x*y+z)))(3)(7)$6 	<+> 

twice(twice)(twice)(suc)$0 		<+>
twice(twice(twice(suc)))$0		<+>

[1..4]++[5..9] 				<+>
take(5)[1..10]				<+>
drop(5)[1..10] 				<+>
map(+1)[3,4,5] 				<+>
map((+1).(2*))[3,4,5] 			<+>
map(f(t).g)$take(5)[3..9] 		<+>
zipWith(**)[1..5][1..5] 		<+>
replicate(5)$f(a,b) 			<+>
power(f)(5)$a                           <+>
take(3)$iterate(f)$5 			<+>
foldl(*)(2)[3,4,5,6,7,8,9] 		<+>
foldr(*)(2)[3,4,5,6,7,8,9,10] 		<+>
foldr($)(2)[(3*),(4+),(5**),(**2),(7+)] <+>
sum[3,4,5,6] 				<+>
filter(<4)[1,2,3,4,5] 			<+>
prodL[[1..3],[1..3]]			<+>

fun((suc(x),y),x+x+y)(6,10) 		<+>
fun((suc(x),y),fun(z,x+y+z)(5))(suc(z),10) <+>
filter(rel(x,x<5))[1..6] 		<+>
filter(rel(x,Int(x)))[1..6]  		<+>

foldl(*)(5)[1..6]			<+>
filter(=/= 4)[1..5]			<+>
take(5)$primes				<+>

[(1,a,[1,2]),(2,a,3),(2,c,[3,4]),(3,a,[1,4]),(4,a,4)] 	<+>
[(1,4),(2,2),(3,5),(4,3),(5,1)]				<+>
0(1,2(5,6,2(5,6,3)))					<+>
[(0,[0,1]),(1,2),(2,[2,3]),(3,4),(4,[4,5]),(5,6)]	<+>
[(7,3),(3,[2,1]),(2,5),(6,7),(1,4),(3,5),(4,3)]    	<+>

        seq(assign(fact,int(1)),            loop(greater(var(z),int(0)),                 seq(assign(fact,mul(var(fact),var(z))),                     assign(z,sub(var(z),int(1))))))


