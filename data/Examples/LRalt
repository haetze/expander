-- LR

constructs: shift error S A B mul c d end P1 P2 P3 P4 P5
defuncts: N T mkSyn mkDer parse goto act lgN
fovars: x w q q' qs qs' a t t' ts alpha m n

axioms:

N = [S,A,B] &
T = [c,d,mul] &

mkSyn(S,[A])([t]) = P1(t) &
mkSyn(A,[A,mul,B])([t,t']) = P2(t,t') &
mkSyn(A,[B])([t]) = P3(t) &
mkSyn(B,[c])([]) = P4 &
mkSyn(B,[d])([]) = P5 &

mkDer(P1(t)) = S(mkDer(t)) &
mkDer(P2(t,t')) = A(mkDer(t),mul,mkDer(t')) &
mkDer(P3(t)) = A(mkDer(t)) &
mkDer(P4) = B(c) &
mkDer(P5) = B(d) &

goto(0,A) = 1 &
goto(0,B) = 2 &
goto(0,c) = 3 &
goto(0,d) = 4 &
goto(1,mul) = 5 &
goto(5,B) = 6 &
goto(5,c) = 3 &
goto(5,d) = 4 &

act(0,c) = shift &
act(0,d) = shift &
act(0,mul) = error &
act(0,end) = error &
act(1,c) = error &
act(1,d) = error &
act(1,mul) = shift &
act(1,end) = (S,[A]) &
act(2,c) = error &
act(2,d) = error &
act(2,mul) = (A,[B]) &
act(2,end) = (A,[B]) &
act(3,c) = error &
act(3,d) = error &
act(3,mul) = (B,[c]) &
act(3,end) = (B,[c]) &
act(4,c) = error &
act(4,d) = error &
act(4,mul) = (B,[d]) &
act(4,end) = (B,[d]) &
act(5,c) = shift &
act(5,d) = shift &
act(5,mul) = error &
act(5,end) = error &
act(6,c) = error &
act(6,d) = error &
act(6,mul) = (A,[A,mul,B]) &
act(6,end) = (A,[A,mul,B]) &

lgN([]) = 0 &
(a `in` N ==> lgN(a:alpha) = lgN(alpha)+1) &
(a `in` T ==> lgN(a:alpha) = lgN(alpha))

|

(act(q,x) = shift  ==> parse(x:w,q:qs,ts) = parse(w,goto(q,x):q:qs,ts)) &
(act(q,end) = (S,alpha) & lg(ts) = lgN(alpha)
                   ==> parse(end:w,q:qs,ts) = mkSyn(S,alpha)(ts)) &
(act(q,end) = (S,alpha) & lg(ts) =/= lgN(alpha)
                   ==> parse(end:w,q:qs,ts) = error) &
(act(q,x) = (a,alpha) & a =/= S & lg(alpha) = m & lg(qs) >= m 
		      & lg(ts)-lgN(alpha) = n & drop(m,q:qs) = q':qs'
                   ==> parse(x:w,q:qs,ts)
		        = parse(x:w,goto(q',a):q':qs',
			        take(n,ts)++[mkSyn(a,alpha)(drop(n,ts))])) &
(act(q,x) = (a,alpha) & a =/= S & lg(qs) < lg(alpha)
                   ==> parse(x:w,q:qs,ts) = error) &
(act(q,x) = error  ==> parse(x:w,q:qs,ts) = error)


